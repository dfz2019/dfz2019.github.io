[ { "title": "Privacy Policy", "url": "/posts/privacy-policy/", "categories": "", "tags": "", "date": "2023-11-22 00:00:00 +0800", "snippet": "PRIVACY POLICYLast updated November 22, 2023This privacy notice for Bedman (“we,” “us,” or “our”), describes how and why we might collect, store, use, and/or share (“process”) your information when you use our services (“Services”), such as when you: Download and use our mobile application (Muay Thai Shadow), or any other application of ours that links to this privacy notice Engage with us in other related ways, including any sales, marketing, or events Questions or concerns? Reading this privacy notice will help you understand your privacy rights and choices. If you do not agree with our policies and practices, please do not use our Services. If you still have any questions or concerns, please contact us at muaythaishadow.feedback@gmail.com.SUMMARY OF KEY POINTSThis summary provides key points from our privacy notice, but you can find out more details about any of these topics by clicking the link following each key point or by using our table of contents below to find the section you are looking for.What personal information do we process? When you visit, use, or navigate our Services, we may process personal information depending on how you interact with us and the Services, the choices you make, and the products and features you use. Learn more about personal information you disclose to us.Do we process any sensitive personal information? We do not process sensitive personal information.Do we receive any information from third parties? We do not receive any information from third parties.How do we process your information? We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent. We process your information only when we have a valid legal reason to do so. Learn more about how we process your information.In what situations and with which parties do we share personal information? We may share information in specific situations and with specific third parties. Learn more about when and with whom we share your personal information.How do we keep your information safe? We have organizational and technical processes and procedures in place to protect your personal information. However, no electronic transmission over the internet or information storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers, cybercriminals, or other unauthorized third parties will not be able to defeat our security and improperly collect, access, steal, or modify your information. Learn more about how we keep your information safe.What are your rights? Depending on where you are located geographically, the applicable privacy law may mean you have certain rights regarding your personal information. Learn more about your privacy rights.How do you exercise your rights? The easiest way to exercise your rights is by visiting muaythaishadow.feedback@gmail.com, or by contacting us. We will consider and act upon any request in accordance with applicable data protection laws.Want to learn more about what we do with any information we collect? Review the privacy notice in full.TABLE OF CONTENTS1. WHAT INFORMATION DO WE COLLECT?2. HOW DO WE PROCESS YOUR INFORMATION?3. WHAT LEGAL BASES DO WE RELY ON TO PROCESS YOUR PERSONAL INFORMATION?4. WHEN AND WITH WHOM DO WE SHARE YOUR PERSONAL INFORMATION?5. HOW LONG DO WE KEEP YOUR INFORMATION?6. HOW DO WE KEEP YOUR INFORMATION SAFE?7. WHAT ARE YOUR PRIVACY RIGHTS?8. CONTROLS FOR DO-NOT-TRACK FEATURES9. DO UNITED STATES RESIDENTS HAVE SPECIFIC PRIVACY RIGHTS?10. DO WE MAKE UPDATES TO THIS NOTICE?11. HOW CAN YOU CONTACT US ABOUT THIS NOTICE?12. HOW CAN YOU REVIEW, UPDATE, OR DELETE THE DATA WE COLLECT FROM YOU?1. WHAT INFORMATION DO WE COLLECT?Personal information you disclose to usIn Short: We collect personal information that you provide to us.We collect personal information that you voluntarily provide to us when you express an interest in obtaining information about us or our products and Services, when you participate in activities on the Services, or otherwise when you contact us.Sensitive Information. We do not process sensitive information.All personal information that you provide to us must be true, complete, and accurate, and you must notify us of any changes to such personal information.2. HOW DO WE PROCESS YOUR INFORMATION?In Short: We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent.We process your personal information for a variety of reasons, depending on how you interact with our Services, including: To save or protect an individual’s vital interest. We may process your information when necessary to save or protect an individual’s vital interest, such as to prevent harm.3. WHAT LEGAL BASES DO WE RELY ON TO PROCESS YOUR INFORMATION?**In Short: We only process your personal information when we believe it is necessary and we have a valid legal reason (i.e., legal basis) to do so under applicable law, like with your consent, to comply with laws, to provide you with services to enter into or fulfill our contractual obligations, to protect your rights, or to fulfill our legitimate business interests.If you are located in the EU or UK, this section applies to you.The General Data Protection Regulation (GDPR) and UK GDPR require us to explain the valid legal bases we rely on in order to process your personal information. As such, we may rely on the following legal bases to process your personal information: Consent. We may process your information if you have given us permission (i.e., consent) to use your personal information for a specific purpose. You can withdraw your consent at any time. Learn more about withdrawing your consent. Legal Obligations. We may process your information where we believe it is necessary for compliance with our legal obligations, such as to cooperate with a law enforcement body or regulatory agency, exercise or defend our legal rights, or disclose your information as evidence in litigation in which we are involved. Vital Interests. We may process your information where we believe it is necessary to protect your vital interests or the vital interests of a third party, such as situations involving potential threats to the safety of any person. If you are located in Canada, this section applies to you.We may process your information if you have given us specific permission (i.e., express consent) to use your personal information for a specific purpose, or in situations where your permission can be inferred (i.e., implied consent). You can withdraw your consent at any time.In some exceptional cases, we may be legally permitted under applicable law to process your information without your consent, including, for example: If collection is clearly in the interests of an individual and consent cannot be obtained in a timely way For investigations and fraud detection and prevention For business transactions provided certain conditions are met If it is contained in a witness statement and the collection is necessary to assess, process, or settle an insurance claim For identifying injured, ill, or deceased persons and communicating with next of kin If we have reasonable grounds to believe an individual has been, is, or may be victim of financial abuse If it is reasonable to expect collection and use with consent would compromise the availability or the accuracy of the information and the collection is reasonable for purposes related to investigating a breach of an agreement or a contravention of the laws of Canada or a province If disclosure is required to comply with a subpoena, warrant, court order, or rules of the court relating to the production of records If it was produced by an individual in the course of their employment, business, or profession and the collection is consistent with the purposes for which the information was produced If the collection is solely for journalistic, artistic, or literary purposes If the information is publicly available and is specified by the regulations 4. WHEN AND WITH WHOM DO WE SHARE YOUR PERSONAL INFORMATION?In Short: We may share information in specific situations described in this section and/or with the following third parties.We may need to share your personal information in the following situations: Business Transfers. We may share or transfer your information in connection with, or during negotiations of, any merger, sale of company assets, financing, or acquisition of all or a portion of our business to another company.5. HOW LONG DO WE KEEP YOUR INFORMATION?In Short: We keep your information for as long as necessary to fulfill the purposes outlined in this privacy notice unless otherwise required by law.We will only keep your personal information for as long as it is necessary for the purposes set out in this privacy notice, unless a longer retention period is required or permitted by law (such as tax, accounting, or other legal requirements).When we have no ongoing legitimate business need to process your personal information, we will either delete or anonymize such information, or, if this is not possible (for example, because your personal information has been stored in backup archives), then we will securely store your personal information and isolate it from any further processing until deletion is possible.6. HOW DO WE KEEP YOUR INFORMATION SAFE?In Short: We aim to protect your personal information through a system of organizational and technical security measures.We have implemented appropriate and reasonable technical and organizational security measures designed to protect the security of any personal information we process. However, despite our safeguards and efforts to secure your information, no electronic transmission over the Internet or information storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers, cybercriminals, or other unauthorized third parties will not be able to defeat our security and improperly collect, access, steal, or modify your information. Although we will do our best to protect your personal information, transmission of personal information to and from our Services is at your own risk. You should only access the Services within a secure environment.7. WHAT ARE YOUR PRIVACY RIGHTS?In Short: In some regions, such as the European Economic Area (EEA), United Kingdom (UK), Switzerland, and Canada, you have rights that allow you greater access to and control over your personal information. You may review, change, or terminate your account at any time.In some regions (like the EEA, UK, Switzerland, and Canada), you have certain rights under applicable data protection laws. These may include the right (i) to request access and obtain a copy of your personal information, (ii) to request rectification or erasure; (iii) to restrict the processing of your personal information; (iv) if applicable, to data portability; and (v) not to be subject to automated decision-making. In certain circumstances, you may also have the right to object to the processing of your personal information. You can make such a request by contacting us by using the contact details provided in the section “HOW CAN YOU CONTACT US ABOUT THIS NOTICE?” below.We will consider and act upon any request in accordance with applicable data protection laws.If you are located in the EEA or UK and you believe we are unlawfully processing your personal information, you also have the right to complain to your Member State data protection authority or UK data protection authority.If you are located in Switzerland, you may contact the Federal Data Protection and Information Commissioner.Withdrawing your consent:If we are relying on your consent to process your personal information, which may be express and/or implied consent depending on the applicable law, you have the right to withdraw your consent at any time. You can withdraw your consent at any time by contacting us by using the contact details provided in the section “HOW CAN YOU CONTACT US ABOUT THIS NOTICE?” below.However, please note that this will not affect the lawfulness of the processing before its withdrawal nor, when applicable law allows, will it affect the processing of your personal information conducted in reliance on lawful processing grounds other than consent.If you have questions or comments about your privacy rights, you may email us at muaythaishadow.feedback@gmail.com.8. CONTROLS FOR DO-NOT-TRACK FEATURESMost web browsers and some mobile operating systems and mobile applications include a Do-Not-Track (“DNT”) feature or setting you can activate to signal your privacy preference not to have data about your online browsing activities monitored and collected. At this stage no uniform technology standard for recognizing and implementing DNT signals has been finalized. As such, we do not currently respond to DNT browser signals or any other mechanism that automatically communicates your choice not to be tracked online. If a standard for online tracking is adopted that we must follow in the future, we will inform you about that practice in a revised version of this privacy notice.9. DO UNITED STATES RESIDENTS HAVE SPECIFIC PRIVACY RIGHTS?In Short: If you are a resident of California, Colorado, Connecticut, Utah or Virginia, you are granted specific rights regarding access to your personal information.What categories of personal information do we collect?We have collected the following categories of personal information in the past twelve (12) months:CategoryExamplesCollectedA. IdentifiersContact details, such as real name, alias, postal address, telephone or mobile contact number, unique personal identifier, online identifier, Internet Protocol address, email address, and account nameNOB. Personal information as defined in the California Customer Records statuteName, contact information, education, employment, employment history, and financial informationNOC. Protected classification characteristics under state or federal lawGender and date of birthNOD. Commercial informationTransaction information, purchase history, financial details, and payment informationNOE. Biometric informationFingerprints and voiceprintsNOF. Internet or other similar network activityBrowsing history, search history, online behavior, interest data, and interactions with our and other websites, applications, systems, and advertisementsNOG. Geolocation dataDevice locationNOH. Audio, electronic, visual, thermal, olfactory, or similar informationImages and audio, video or call recordings created in connection with our business activitiesNOI. Professional or employment-related informationBusiness contact details in order to provide you our Services at a business level or job title, work history, and professional qualifications if you apply for a job with usNOJ. Education InformationStudent records and directory informationNOK. Inferences drawn from collected personal informationInferences drawn from any of the collected personal information listed above to create a profile or summary about, for example, an individual’s preferences and characteristicsNOL. Sensitive personal InformationNOWe will use and retain the collected personal information as needed to provide the Services or for: Category B - I do not collect personal informationWe may also collect other personal information outside of these categories through instances where you interact with us in person, online, or by phone or mail in the context of: Receiving help through our customer support channels; Participation in customer surveys or contests; and Facilitation in the delivery of our Services and to respond to your inquiries. How do we use and share your personal information?Learn about how we use your personal information in the section, “HOW DO WE PROCESS YOUR INFORMATION?”Will your information be shared with anyone else?We may disclose your personal information with our service providers pursuant to a written contract between us and each service provider. Learn more about how we disclose personal information to in the section, “WHEN AND WITH WHOM DO WE SHARE YOUR PERSONAL INFORMATION?”We may use your personal information for our own business purposes, such as for undertaking internal research for technological development and demonstration. This is not considered to be “selling” of your personal information.We have not disclosed, sold, or shared any personal information to third parties for a business or commercial purpose in the preceding twelve (12) months. We will not sell or share personal information in the future belonging to website visitors, users, and other consumers.California ResidentsCalifornia Civil Code Section 1798.83, also known as the “Shine The Light” law permits our users who are California residents to request and obtain from us, once a year and free of charge, information about categories of personal information (if any) we disclosed to third parties for direct marketing purposes and the names and addresses of all third parties with which we shared personal information in the immediately preceding calendar year. If you are a California resident and would like to make such a request, please submit your request in writing to us using the contact information provided below.If you are under 18 years of age, reside in California, and have a registered account with the Services, you have the right to request removal of unwanted data that you publicly post on the Services. To request removal of such data, please contact us using the contact information provided below and include the email address associated with your account and a statement that you reside in California. We will make sure the data is not publicly displayed on the Services, but please be aware that the data may not be completely or comprehensively removed from all our systems (e.g., backups, etc.).CCPA Privacy NoticeThis section applies only to California residents. Under the California Consumer Privacy Act (CCPA), you have the rights listed below.The California Code of Regulations defines a “residents” as:(1) every individual who is in the State of California for other than a temporary or transitory purpose and(2) every individual who is domiciled in the State of California who is outside the State of California for a temporary or transitory purposeAll other individuals are defined as “non-residents.”If this definition of “resident” applies to you, we must adhere to certain rights and obligations regarding your personal information.Your rights with respect to your personal dataRight to request deletion of the data — Request to deleteYou can ask for the deletion of your personal information. If you ask us to delete your personal information, we will respect your request and delete your personal information, subject to certain exceptions provided by law, such as (but not limited to) the exercise by another consumer of his or her right to free speech, our compliance requirements resulting from a legal obligation, or any processing that may be required to protect against illegal activities.Right to be informed — Request to knowDepending on the circumstances, you have a right to know: whether we collect and use your personal information; the categories of personal information that we collect; the purposes for which the collected personal information is used; whether we sell or share personal information to third parties; the categories of personal information that we sold, shared, or disclosed for a business purpose; the categories of third parties to whom the personal information was sold, shared, or disclosed for a business purpose; the business or commercial purpose for collecting, selling, or sharing personal information; and the specific pieces of personal information we collected about you. In accordance with applicable law, we are not obligated to provide or delete consumer information that is de-identified in response to a consumer request or to re-identify individual data to verify a consumer request.Right to Non-Discrimination for the Exercise of a Consumer’s Privacy RightsWe will not discriminate against you if you exercise your privacy rights.Right to Limit Use and Disclosure of Sensitive Personal InformationWe do not process consumer’s sensitive personal information.Verification processUpon receiving your request, we will need to verify your identity to determine you are the same person about whom we have the information in our system. These verification efforts require us to ask you to provide information so that we can match it with information you have previously provided us. For instance, depending on the type of request you submit, we may ask you to provide certain information so that we can match the information you provide with the information we already have on file, or we may contact you through a communication method (e.g., phone or email) that you have previously provided to us. We may also use other verification methods as the circumstances dictate.We will only use personal information provided in your request to verify your identity or authority to make the request. To the extent possible, we will avoid requesting additional information from you for the purposes of verification. However, if we cannot verify your identity from the information already maintained by us, we may request that you provide additional information for the purposes of verifying your identity and for security or fraud-prevention purposes. We will delete such additionally provided information as soon as we finish verifying you.Other privacy rights You may object to the processing of your personal information. You may request correction of your personal data if it is incorrect or no longer relevant, or ask to restrict the processing of the information. You can designate an authorized agent to make a request under the CCPA on your behalf. We may deny a request from an authorized agent that does not submit proof that they have been validly authorized to act on your behalf in accordance with the CCPA. You may request to opt out from future selling or sharing of your personal information to third parties. Upon receiving an opt-out request, we will act upon the request as soon as feasibly possible, but no later than fifteen (15) days from the date of the request submission. To exercise these rights, you can contact us by visiting muaythaishadow.feedback@gmail.com, by email at muaythaishadow.feedback@gmail.com, or by referring to the contact details at the bottom of this document. If you have a complaint about how we handle your data, we would like to hear from you.Colorado ResidentsThis section applies only to Colorado residents. Under the Colorado Privacy Act (CPA), you have the rights listed below. However, these rights are not absolute, and in certain cases, we may decline your request as permitted by law. Right to be informed whether or not we are processing your personal data Right to access your personal data Right to correct inaccuracies in your personal data Right to request deletion of your personal data Right to obtain a copy of the personal data you previously shared with us Right to opt out of the processing of your personal data if it is used for targeted advertising, the sale of personal data, or profiling in furtherance of decisions that produce legal or similarly significant effects (“profiling”) To submit a request to exercise these rights described above, please email muaythaishadow.feedback@gmail.com or visit muaythaishadow.feedback@gmail.com.If we decline to take action regarding your request and you wish to appeal our decision, please email us at muaythaishadow.feedback@gmail.com. Within forty-five (45) days of receipt of an appeal, we will inform you in writing of any action taken or not taken in response to the appeal, including a written explanation of the reasons for the decisions.Connecticut ResidentsThis section applies only to Connecticut residents. Under the Connecticut Data Privacy Act (CTDPA), you have the rights listed below. However, these rights are not absolute, and in certain cases, we may decline your request as permitted by law. Right to be informed whether or not we are processing your personal data Right to access your personal data Right to correct inaccuracies in your personal data Right to request deletion of your personal data Right to obtain a copy of the personal data you previously shared with us Right to opt out of the processing of your personal data if it is used for targeted advertising, the sale of personal data, or profiling in furtherance of decisions that produce legal or similarly significant effects (“profiling”) To submit a request to exercise these rights described above, please email muaythaishadow.feedback@gmail.com or visit muaythaishadow.feedback@gmail.com.If we decline to take action regarding your request and you wish to appeal our decision, please email us at muaythaishadow.feedback@gmail.com. Within sixty (60) days of receipt of an appeal, we will inform you in writing of any action taken or not taken in response to the appeal, including a written explanation of the reasons for the decisions.Utah ResidentsThis section applies only to Utah residents. Under the Utah Consumer Privacy Act (UCPA), you have the rights listed below. However, these rights are not absolute, and in certain cases, we may decline your request as permitted by law. Right to be informed whether or not we are processing your personal data Right to access your personal data Right to request deletion of your personal data Right to obtain a copy of the personal data you previously shared with us Right to opt out of the processing of your personal data if it is used for targeted advertising or the sale of personal data To submit a request to exercise these rights described above, please email muaythaishadow.feedback@gmail.com or visit muaythaishadow.feedback@gmail.com.Virginia ResidentsUnder the Virginia Consumer Data Protection Act (VCDPA):“Consumer” means a natural person who is a resident of the Commonwealth acting only in an individual or household context. It does not include a natural person acting in a commercial or employment context.“Personal data” means any information that is linked or reasonably linkable to an identified or identifiable natural person. “Personal data” does not include de-identified data or publicly available information.“Sale of personal data” means the exchange of personal data for monetary consideration.If this definition of “consumer” applies to you, we must adhere to certain rights and obligations regarding your personal data.Your rights with respect to your personal data Right to be informed whether or not we are processing your personal data Right to access your personal data Right to correct inaccuracies in your personal data Right to request deletion of your personal data Right to obtain a copy of the personal data you previously shared with us Right to opt out of the processing of your personal data if it is used for targeted advertising, the sale of personal data, or profiling in furtherance of decisions that produce legal or similarly significant effects (“profiling”) Exercise your rights provided under the Virginia VCDPAYou may contact us by email at muaythaishadow.feedback@gmail.com or visit muaythaishadow.feedback@gmail.com.If you are using an authorized agent to exercise your rights, we may deny a request if the authorized agent does not submit proof that they have been validly authorized to act on your behalf.Verification processWe may request that you provide additional information reasonably necessary to verify you and your consumer’s request. If you submit the request through an authorized agent, we may need to collect additional information to verify your identity before processing your request.Upon receiving your request, we will respond without undue delay, but in all cases, within forty-five (45) days of receipt. The response period may be extended once by forty-five (45) additional days when reasonably necessary. We will inform you of any such extension within the initial 45-day response period, together with the reason for the extension.Right to appealIf we decline to take action regarding your request, we will inform you of our decision and reasoning behind it. If you wish to appeal our decision, please email us at muaythaishadow.feedback@gmail.com. Within sixty (60) days of receipt of an appeal, we will inform you in writing of any action taken or not taken in response to the appeal, including a written explanation of the reasons for the decisions. If your appeal is denied, you may contact the Attorney General to submit a complaint.10. DO WE MAKE UPDATES TO THIS NOTICE?In Short: Yes, we will update this notice as necessary to stay compliant with relevant laws.We may update this privacy notice from time to time. The updated version will be indicated by an updated “Revised” date and the updated version will be effective as soon as it is accessible. If we make material changes to this privacy notice, we may notify you either by prominently posting a notice of such changes or by directly sending you a notification. We encourage you to review this privacy notice frequently to be informed of how we are protecting your information.11. HOW CAN YOU CONTACT US ABOUT THIS NOTICE?If you have questions or comments about this notice, you may email us at muaythaishadow.feedback@gmail.com or contact us by post at:Bedman____________________12. HOW CAN YOU REVIEW, UPDATE, OR DELETE THE DATA WE COLLECT FROM YOU?Based on the applicable laws of your country, you may have the right to request access to the personal information we collect from you, change that information, or delete it. To request to review, update, or delete your personal information, please visit: muaythaishadow.feedback@gmail.com." }, { "title": "Project 10000", "url": "/posts/project-10000/", "categories": "daily-plan", "tags": "", "date": "2020-05-02 06:01:02 +0800", "snippet": "What is this?A project that will cost 10000 hours to master a course, whatever topic it is about.How to achieve it?To achieve this goal, there is a list of items needed to be prepared before implementation: A goal to achieve A time recorder to record the time spent on achieving this goal A continuous (monthly / quarterly) reflection planLatest updateAlthough this post was published in quite long time ago, I wasn’t aware of what to do for the first step: A goal to achieve at that time. After several YOE in software engineering career, I figured out some key capabilities which requires dedicated training: Large-Scale System Design Cross Functional Communication Fast Learning" }, { "title": "Intermediate Python", "url": "/posts/intermediate-python/", "categories": "programming-language, python", "tags": "python, django", "date": "2019-12-01 01:19:36 +0800", "snippet": " As all known, there are two versions of Python, Python 2 and Python 3. One suggestion: learn python 3. From Python 2 sunset announcement, it states that 2020/01/01 will be the day to sunset Python 2. During that time, Python 2 will stop maintenance. Time to transfer to Python 3 lah. Another suggestion is that pls keep critical thinking. This blog was initially intended to be a self reflection. Hence, bear with me if there are some mistakes through this blog.Python is a versatile language that can support for multiple purposes. scripting web development ML / AI trackThere are I have seen too many tutorials about Python basics, most of them introduces ML track. However, I will introduce Python in web development track since I am quite proficient in ML/AI track. For those tracks, there are much more tutorials that do better work than me.# This blog will include a lot of code blocksimport sysdef main(): print(\"Hello, \", sys.argv[1])if __name__ == '__main__': main()This is a simple Python code script that print a sentence with a parameter that you input. The reason that you set __name__ == '__main__' is because you wanna different behaviors between this Python file being executed directly and being imported by other modules.For introduction Python tutorial, please refer to reference [1]. This blog will assume readers to have such prerequisites. Python basic CS fundamentalsgeneral knowledge:Python does minimum compile-time check, almost all the check is done in runtime check.python string is immutable, just like string in Java and C#. The reason that string type in Python is immutable is: it is safe to put as a dict key without deepcopy the content of string. If assign string to another variable then they do not point to the same object. it is threadsafe easy for programming, you can add mutable wrapper on immutable type but the reverse is difficultEvery time we manipulate string, we actually construct brand new string with changes that you made.P.S. There is one hidden logic in Python interactive interpreter worth noticing, the single underscore (_) is bounded to the last expression evaluated. For instance:&gt;&gt;&gt; lambda x, y: x * x + y * y&lt;function &lt;lambda&gt; at 0x102922e18&gt;&gt;&gt;&gt; _(2,3)13Here the single underscore refers to the lambda function object that I initialised before. There are actually a lot of usages of underscore in python code. Some of them are just conventions and designed as a hint for programmers, while others are enforced by python interpreter.Some of the most common usages are as following: single underscore: _ used as a variable name, by convention the value of this variable is not cared referred as last object in the interactive python shell, like last function or last variable single leading underscore: _var by convention indicating this variable _var is intended for internal use When importing using wildcard (*), functions with leading single underscore will not be imported single trailing underscore: var_ used by convention to avoid conflicts with python keywords double leading underscores: __var enforced by python interpreter, trigger name mingling when using in a class. for example, varaible name will append class name in front __var ==&gt; _Class__var while class name does not leading underscores double leading and trailing underscores: __var__ reserved for python special methods like __init__ and __call__ For the full reference of underscore (_), please refer to this blog.One famous feature of Python is its concise syntax. There are some syntactic sugars in python. According to Wikipedia, Syntactic sugar is programming syntax that is designed to make code easy to read and understand. One sugar is called decorator.def my_decorator(func): def wrapper(*args, **kwargs): # do something before actual function result = func(*args, **kwargs) # do something after actual function return result return wrapper@my_decoratordef actual_func(): # do something # similar with my_decorator(actual_func)decorator is just normal function in python and it can be used as @ + function name to simplify the usage. If the function to be wrapped has some arguments, it can be passed in through *args and **argspython encoding &amp; decodingThe first question, of course, What is encoding/decoding?According to statement of this post, In computers, encoding is the process of putting a sequence of characters (letters, numbers, punctuation, and certain symbols) into a specialized format for efficient transmission or storage. Decoding is the opposite process – the conversion of an encoded format back into the original sequence of characters.Simply speaking, encoding and decoding is special converting method that converting between bytes and string and bytes to string ==&gt; decode, string to byte ==&gt; encode. After encoding, data format changes to a format (byte) that machine can understand efficiently. After decoding, data fomrat changes to format (string) that human kinds can understand efficiently.To construct an unicode string in python 3, add a prefix u in front of the string, like u'\\xf1'.If encode, then string becomes bytes with specific encoding method like utf-8. UTF stands for Unicode Transformation Format. Since utf-8 is more universal and can represent more characters in computer world, most of the applications will use utf-8 as default encoding method (especially those application that has Chinese characters)For example, this is a small script that I ran in python interactive interpreter to illustrate the basic encoding and decoding process in Python.&gt;&gt;&gt; unicode_str = u'\\xf1'&gt;&gt;&gt; unicode_str'ñ'&gt;&gt;&gt; unicode_str.encode(encoding='UTF-8',errors='strict')b'\\xc3\\xb1'&gt;&gt;&gt; utf8_str = unicode_str.encode(encoding='UTF-8',errors='strict')&gt;&gt;&gt; utf8_str.decode()'ñ'Then there is a question, will utf-16 use more bytes to encode a char compared to utf-8? what about utf-32?The answer is absolutely no. For different characters, utf8 and utf16 and utf-32 will use different number of bits to encode. For instance, U+0000 to U+007F are encoded as 8 bits in utf-8, 16 bits in utf-16 and 32 bits in utf-32 while U+0800 to U+FFFF requires 24 bits for utf-8 but only 16 bits for utf-16 and 32 bits for utf-32.From the above comparison, utf-8 is more efficient than utf-16 in smaller unicode indexes, which are used more frequently. Hence, most applications use utf-8.Full reference can refer here: Unicode HOWTO and Unicode Comparepython list, tuple, dict, setlistlist is passed by reference, use = does not copy the content of list, only copy the pointer to the object. + works as concatenation between lists.pythoniclist comprehension is the most common pythonic implementation of for loop. According to this post and Zen of Python, Exploiting the features of the Python language to produce code that is clear, concise and maintainable.You may understand more about pythonic now. From my own point of view, pythonic is a kind of coding style that the creator of python want programmer to write in. It will make python code concise and clear.Sortingsorted is the built-in function to sort a list of objects according to a key. By default, the list is sorted by integer value. The key to sort the list can be customized.list = [2, 3, 4, 1, 6]sorted_list = sorted(list) # default sorting, [1, 2, 3, 4, 6]descending_sorted_list = sorted(list, reverse=True) # [6, 4, 3, 2, 1]def some_func(element): # do some operation of this element return element * 0.1 if element % 2 == 0 else element * 2customized_sorted_list = sorted(list, key=some_func) # [2, 4, 6, 1, 3]# The some_func can also be implemented by lambda function lambda_sorted_list = sorted(list, key=lambda element: element * 0.1 if element % 2 == 0 else element * 2) # [2, 4, 6, 1, 3]lambdaIn the last line of previous code snippet, there is a function called lambda. For example,lambda x: x * x + 1 # same as the normal functiondef some_func(x): return x * x + 1lambda function is an anonymous function which do not need to state the name of the function. A lambda function contains three components, the keyword (lambda), the function input variable (x) and the statement (x * x + 1). Python lambda function only allows one statement and the result of the statement will be returned as the result of the lambda function. You don’t need to specify the return keyword because hidden logic of lambda statement is to return the value.According to Real Python post, Lambda functions are frequently used with higher-order functions, which take one or more functions as arguments or return one or more functions.More specifically speaking, when a function needs to take one function as its argument, we don’t need to write the function body separately, we can use lambda function to take place. The higher-order functions are mentioned in the next section.Advanced usage - map/filter/reduceThere are some advanced usages of list in python. These are higher-order functions mentioned in the previous section. These higher order functions are used to conveniently manipulate elements in the list and output some response.mapFor map, it is used to execute a function to every element in the list (Actually may not be a list, just an iterable). For example, we would like to achieve the effect of make every element to attach a string happy in the end, we can do it using map function. map is so-called higher-order function since it takes functions as its arguments. The first argument of map is the function (we call it exe) that we would like to execute and the following arguments are iterables of arguments of exe. Each time of map(exe, list_of_a, list_of_b), exe(a, b) will execute be executed and return the result.&gt;&gt;&gt; input = [1,2,3,4,5,6]&gt;&gt;&gt; input[1, 2, 3, 4, 5, 6]&gt;&gt;&gt; res = list(map(lambda x: str(x) + 'happy', input))&gt;&gt;&gt; res['1happy', '2happy', '3happy', '4happy', '5happy', '6happy']&gt;&gt;&gt; input[1, 2, 3, 4, 5, 6]&gt;&gt;&gt; res = list(map(lambda x, y: str(x) + str(y), input, range(1, 7)))&gt;&gt;&gt; res['11', '22', '33', '44', '55', '66']Note that this function is not in place, which means that the function will not change the value of original list. Rather, it will assign value to another list.filterfilter is a function used quite frequently in list manipulation. Nomally it will setup some filtering function and return a sublist of the list according to the filter. For example, you wanna find all the elements meeting the lower bound, you would do something like this:&gt;&gt;&gt; res = list(filter(lambda x: x &gt; 3, input))&gt;&gt;&gt; res[4, 5, 6]It will filter out elements less than 3. The filter function has the same mechanism with map. One thing special for filter is that it requires the return value of its first argument function to be boolean to judge whether to put it into returned sublist.reducereduce is to apply function to adjacent elements cumulatively in the list and return the final result. The returned value of reduce is a single value. Notice that reduce is not import by default, you need to explicitly import it from functoolsfrom functools import reduceinput = [1,2,3,4,5,6]initial_val = 10res = reduce(lambda x, y: x^y, input, initial_val) # res = 13This reduce function computes the XOR result of all elements of input plus the initial value, so the reduce function can be explained as 10 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6, which is 13.tuple A tuple is a fixed size grouping of elements, such as an (x, y) co-ordinate.According to Google python tutorial, tuple is immutable. Immutable means once the variable is assigned some value, it cannot be modified anymore. The tuple can be created by using tuple((tuple_itself)) or just simply ()tuple_sample = (1, 'string', 2.3)tuple_sample = tuple((1, 'string', 2.3)) # effect same as abovetuple_sample[1] = 'another_str'Once someone tries to modify tuple value like above, exception will pop up.Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'tuple' object does not support item assignmentAccording to tutorial of Python tuple, there are some operations allowed to operate on Python tuple: Allowed operation Python expression find the length len(tuple_name) concatenate tuple + tuple repetition tuple * times check if inside if ele in tuple Iteration for ele in tuple: nesting tuple_total = (tuple1, tuple2) Another property that can be derived from the immutability of tuple is that it is hashable and as a result it can be used as key of dict. The reason is that if it is used as key of dict, the value of the key itself is passed by reference, which means if the dict key is confirmed, it is not supposed to be changed anymore. If it is a list, it will have the risk to change its value, the hashing algorithm of dict will gonna change its source value. Hence, list is not hashable.dictdict is a kind of data structure that contains key-value pairs. Full name is Dictionary in python. It has similar mechaism with HashMap in java. This kind of framework is often used when efficient searching is required and ordering is not strictly required. It does not need to loop through the whole data to find the data with specific key, since it can find the data according to its hash key.dict in python is thread safe, which is a quite important feature when it supports multi-thread application in python.OrderedDict() preserves the order of entry insertion. When loop through the dict, the order is the same as the insertion order.&gt;&gt;&gt; my_dict = {}&gt;&gt;&gt; my_dict[(1,2)] = [1,2]&gt;&gt;&gt; my_dict{(1, 2): [1, 2]}&gt;&gt;&gt; my_dict[[1,2]] = [1,2]Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: unhashable type: 'list'For simple example above, my_dict = {} initialises a dictionary with empty key-value pair. When you wanna add key-value pairs into the dictionary, simply use my_dict[key] = value. The key’s data type has to be hashable since the dictionary need to compute the hash code of input key to efficient store it. As introduced in last section, tuple can be used as dict key and list cannot be used as dict key since tuple is hashable and list is not hashable. This also reflects when serialization and deserialization of JSON structure is used. One direct method to check whether it is hashable is to check whether it has the __hash__ method. This method is used to give a hash value to an object.However, we cannot simply say tuple is hashable because it is quite flexible and its elements may be unhashable data types.hash functionAccording to wikipedia hash function, hash function is a kind of algorithm that can be used to map data of arbitrary size to fixed-size values. The values are used to index a fixed-size table called hash table.To interpret this, we have to know that hash table is used to efficiently retrieve data from a chunk of data. The reason is that it makes unordered list become in-order in the underneath implementation. The hash function will convert different data types into valid array index and use constant time to find the corresponding values.The complete list of data types not available to be dictionary key: list dict set tuple with above elementsBasically if a data type is not list / dict / set or tuple with those elements, it is hashable.consistent hashing is another topic, I will mention it in blog of distributed system if I have that blog.setset in python is implemented in hash also.multithreadMultithread is to execute a program using different threads, access one common resource from different places and push or pull its content into the resource.A thread contains: thread ID program counter register set stackThe program counter of thread is used to record the next instruction to execute in the program. Register set is used to record value of variable in memory. Register set has the fastest access speed among the methods of saving variables (like cache and hard drive). Stack is used to store the local primitive variables and reference to objects in heap. Every thread has its own stack.Multiple threads shares code section, data section and any operating resource that need to be accessed by different threads.GILThere is a mechanism in python called GIL(Global Interpreter Lock) if we assume that underline implementation of Python is CPython (Cpython is the default interpreter of Python, it will translate Python code to byte code).According to Python Wiki, In CPython, the global interpreter lock, or GIL, is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once.This statement states that only one active thread is allowed during the whole context of Python program. Even if the CPU running python program has multiple cores, it will be blocked by the mutex if the processes are not fully separated.Because of this constraint, the native multithreading in python is not actually parallel.Then the question comes, why we still need Threading module with the constraint of GIL? It will be explained in next section.Concurrency and ParallelismBefore introducing the tricks, I would like to introduce some fundamental concepts related to multithread first. Although some of the concepts may not quite related to Python, it is still good to know.When we talk about multi-threading and multi processing, what we really want to achieve is actually concurrency and parallelism.According to this blog, concurrency: managing access to shared state from different threads, like scenario of most web applications parallelism: utilising multiple processors / cores to improve the performanceSo let’s say concurrency is used to manage different clinets accessing one server. Since server has only one program running, this program need to accept accesses from different clients, they use multithreading to achieve this. Parallelism is used to improve performance by fully utilizing the processors to improve the overall performance.After knowing those basic concepts and the GIL in python, you may raise a question: Why we still need multi-threading in python since it cannot improve the performance?For different scenarios, there are different kinds of bottlenecks. Mainly there are two kinds of bottlenecks, IO/network bottleneck or computational power bottleneck. Python multithreading can solve IO bottleneck (like webserver) by allowing a lot of traffic accessing same server. For CPU-bound program, it will not help since only one active thread is working at the same time.However, python can still achieve parallelism by using multi-processing.gevent vs greenlet vs threadingAccording to the next section of the blog, it states the relationship between gevent and greenlet Greenlets are a lightweight cooperative threads that are managed and scheduled inside the process.Greenlets is different from conventional thread in python in these aspects:for POSIX thread (pthread):* pthreads can switch between threads pre-emptively, switching control from a running thread to a non-running thread at any time\t* On multicore machines, pthreads can run more than one thread. However python’s Global Interpreter Lock (CPython Intepreter) prevents parallelism and concurrency is only effective for I/O-bound programs\t* Race conditions can occur when implementing multi-threading code. Use locks to manage mutex to avoid race conditions.\tfor greenlets: * greenlets only switch when control is explicitly given up by a thread - when using yield() or wait() - or when a thread performs a I/O blocking operation such as read or write* greenlets can only run on one single CPU and is useful for I/O-bound programs* There’s no possibility of two threads of control accessing the same shared memory at the same time for greenlets so there will not be any race conditions.From the above paragraph, it is obvious that greenlets can let program take full control of multithreading, it will not be interrupted but only switch to another thread when calling yield() or wait(). Moreover, both of these two approaches (greenlets and native thread) do not bypass the GIL but only achieve concurrency.According to Gevent official doc,If you regard greenlets as a thread, gevent is used to control the greenlets to execute in certain order.Gevent monkey patch is to change program behaviour without changing source code. It will use gevent to replace the native python threading module.import gevent.monkey; gevent.monkey.patch_thread()import threadingscripting track: requests + beautifulsoup + Pandas + Selenium(?)I am not quite familiar with web crawling track. This track most focuses on getting massive information from websites and do data analysis based on that.web development track: DjangoThere will be another blog specifically talking about this topic. Because of limitation of length, I will not introduce details about Django.ML / AI trackI am not quite familiar with AI track since I only did some tiny tutorials that can be found on Internet. Further tutorials can be found everywhere else since machine learning is super hot these days. But as for me, I would concentrate on software development to make it more reliable.Reference: Google Python Tutorials https://www.python.org/dev/peps/pep-0008/ https://docs.python.org/3/library/ https://stackoverflow.com/questions/8680080/why-are-python-strings-immutable-best-practices-for-using-them https://docs.python.org/3/howto/unicode.html https://realpython.com/" }, { "title": "Let's Go", "url": "/posts/go-introduction/", "categories": "programming-language, go", "tags": "go", "date": "2019-11-29 05:12:36 +0800", "snippet": "regex introductionThis is not quite related to Python, but I would like to include this part in this tutorial as well.Some normal characters:Some special charactersSince there is not" }, { "title": "Git Cheatsheet", "url": "/posts/git-cheatsheet/", "categories": "dev-tool", "tags": "git", "date": "2019-11-12 08:58:27 +0800", "snippet": "首篇blog献给我最最最喜欢的小梁！ 工欲善其事，必先利其器。Since this blog does not go through sufficient polishing period, there might be some mistakes or some outdated content, feel free to contact me for any bug you find. Thanks in advance! Another issue is that some naming convention is not quite consistent throughout this blog because this is my first time to write English blog.IntroductionGit is a version control system used to facilitate the collaboration between multiple developers by using version control (everyone can controls their version to make sure all the features can be developed concurrently).If you are not familiar with basic operations of Git, then probably you can search for git book to learn more about Git basics. This blog will focus on the tricks and problems during my usage of Git in my daily work.You may notice that several commands appear several times in different sections, this is the expected behavior since those commands will function differently with different arguments. The Git commands part will introduce commands by functions, hence some commands might be diverged into different parts.I would like to There are three kinds of changes in local environment. changes in the staging area (changes to be committed in next commit) (added into index) changes not in the staging area but still tracked changes not tracked or ignoredMemo first words in &lt;&gt; is variable name phrase in this format and start with git are command and its parameters &lt;remote-name&gt; for example: origin &lt;branch-name&gt; / &lt;local-branch-name&gt; / &lt;remote-branch-name&gt;: masterGit commandsSimple execution (normal execution)git initgit addgit commit -a: stage all the tracked files -m: attach the commit message in commit command, no need to enter text editor to type commit msggit rm no arguments: the file will go away and not tracked --cached: still keep the file in hard drive but not have Git trackgit mv: seldomly usedgit checkout no arguments: switch to an existing branch -b: switch to a new local branch with same file status of current branchgit tag -a &lt;tag-name&gt; -m &lt;tagging-msg&gt;: create a tag with tagging msg &lt;tag-name&gt;: short commandgit config --global alias.&lt;alias-name&gt; &lt;command-name&gt;: create alias for one command For example, $ git config --global alias.last 'log -1 HEAD' will set git last to perform as git log -1 HEAD --global pull.rebase true / false: true will set the default pull method to rebase while false will set to mergegit clean -df: remove all the files that are untrackedgit stash no arguments / push: push tracked changes that are not yet ready to commit into stash stack list: view the list of stash apply / apply stash{&lt;version-number&gt;}: apply changes that you stashed into stack previously or some older version specified by &lt;version-number&gt; apply --index: only reapply staged changes. pop: apply changes and pop the saved changes out from stash stackActually there are some cases that you may make the changes in one branch and want those changes to take effect in another branch. git stash is a command for you.Checking local statusThis part is like GET request in HTTP perspective, it will not do any changes to the file status, it will only check statusgit statusgit diff no arguments: see changes not yet staged --staged / --cached: staged changes that will go into last commitgit log no arguments: display history only with commit msg and hash in reverse chronological order --graph: display branch and merge history in graph (tree) --patch / -p: display history with file change summary -{number}: display number logs --stat: display history with brief summary --pretty={format}: pre built-in format or customized format defined by usgit tag no arguments: list specific points in a repo’s history -l &lt;tag-sub-name&gt;: filter according to tag namegit show &lt;tag-name&gt;: show tag with commitsError handling (undo after abnormal execution)When executing such commands, be careful since not all the undo operations can be undoed againIt is quite annoying that sometimes you do the wrong operation and your local development branch becomes messy. Even worse your changes have been pushed to remote branch. The worst is your changes have been merged into mainline (If you wanna change something, it may pollute others’ work).git commit --amend: undo the last commit, can add forgotten file or modify commit messagegit reset (this could be a dangerous command with some arguments like --hard since you probably lose your work) HEAD &lt;file-name&gt;: unstage a staged file --soft &lt;commit-hash&gt;: change head pointer and put previous changes into staged area --mixed &lt;commit-hash&gt;: the default mode, change head pointer and put previous changes into unstaged area --hard &lt;commit-hash&gt;: change head pointer and remove all the uncommitted changesFor git reset details, can refer to this question for further understanding.git revert &lt;commit-hash&gt;: revert a commit and generate a commit about this reverting operationgit checkout -- &lt;file-name&gt; / &lt;file-name&gt;: discard changes that you made to the file &lt;== could be dangerousWork with remotes (Fetching and Uploading)git clone no arguments: clone all the content in remote and add remote branch implicitly -o &lt;remote-name&gt;: default remote name is origin, can change to other names during clone processgit remote no arguments: check upstreaming branch -v: show full url of upstreaming branch(push and pull) add &lt;short-name&gt; &lt;url&gt;: add upstreaming branch explicitly rename &lt;old-remote-name&gt; &lt;new-remote-name&gt; remove &lt;short-name&gt;: delete remote reference, all remote branches are also deleted show origin: remote branchesgit fetch no arguments: fetch all the changes on the server, this command will not modify anything in local, just be ready for you to operate &lt;remote-name&gt;: fetch all info from remote, for example, git fetch origingit pull == git fetch + git merge from upstreaming branch no arguments: fetch commits in upstreaming branch and merge into local branch --rebase: == git fetch + git rebase in this casegit push no arguments: push to the default remote branch &lt;remote-name&gt; &lt;branch-name&gt;: push to remote branch if local branch name and remote branch name are the same &lt;remote-name&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;: push to remote branch if local branch name and remote branch name are different &lt;remote-name&gt; --delete &lt;remote-branch-name&gt;: delete remote branch, remove pointer from server --force: rewrite upstreaming branch history according to local historygit checkout -b &lt;local-branch-name&gt;: create a new branch and switch to it == git branch + git checkout -b &lt;local-branch-name&gt; &lt;remote-name&gt;/&lt;remote-branch-name&gt;: create a local branch that sync with remote branch --track &lt;remote-name&gt;/&lt;remote-branch-name&gt;: set up current local branch to track remote branch with branch name git merge and git rebase are two ways to integrate changes from other branches or local to current branch while rebase maintains a cleaner history. However, it is dangerous to use git rebase blindly without fully understand the effect of this command. According to Git book, Do not rebase commits that exist outside your repository and people may have based work on them.Rebasing changes the commit history and if other people already merged the older version of commit history and you push newer version, it will become messy.git merge &lt;branch-name&gt;: merge another branch into current branch fast-forward: fast-forward simply means move the HEAD pointer forward, Git regards it as a linear history, no diverging and merging required --no-ff &lt;branch-name&gt;: merge without fast forward, will always generate a merge commit even if it is fast forward mergegit rebase &lt;branch-name&gt;: copy commits and merge another branch into current branch, can rebase on top of force-pushed rebase work &lt;branch-a-name&gt; &lt;branch-b-name&gt;: make branch-b replay changes in branch-a --onto &lt;branch-a-name&gt; &lt;branch-b-name&gt; &lt;branch-c-name&gt;: take commits from branch-c diverged from branch-b and apply direcly to branch-a (a bit tricky, I don’t like this command)Usually public branches use git merge while personal branch use git rebase. Rebase will make commit history cleaner by rewriting the whole commit history. However, it will pollute other people’s history if you rebase + push. merge will leave a merge commit in the history.For public branch that someone already rebased his/her commits into it and we already pulled before, use git rebase to merge remote branch code into your branch rather than git merge to avoid duplicate commits.git branch no arguments: list all the local branches -r: list all the remote branches -d &lt;branch-name&gt;: delete branch -D &lt;branch-name&gt;: force delete branch (may lose changes that haven’t commited into stable branches) -v: see the last commit of each local branch -vv: list all local branches with tracking branch and head pointer info --no-merged: see the branches that contain unmerged commits -u / --set-upstream: set upsteam branchGit branchingAccording to Git Book Branching means you diverge from the main line of development and continue to do work without messing with that main line.The statement from Git Book states the core concept of branching, which is to take care of personal development while still maintain the easy-to-merge connection with main line. The core of Git branching is actually diverge and merge. To find a way to diverge and merge conveniently and lightly, Linus Trovalds use concept of pointers to make it work.alias of gitGit implementationGit stores its data as a sequence of snapchats of the whole filesystem. It does not copy the whole files but stores the reference of each file whenever user commits something. So the whole git history is like a stream of snapshots.There are three types of files in git file system, commit, tree and blob. Branch is actually a pointer to different commits and moving the HEAD of each branch is actually changing the position of pointer, which is relatively lightweight and convenient compared to other VCS. branch is a file that contains the 40 character SHA-1 checksum of the commit that it points to.fast-forward is a concept that applys when integrating changes. Simply treat it as linear merge, do diverging between branches.// When git communicate between local repo and remote repo(GitHub or Gitlab), there are two protocols that it can use. https and ssh.There are 4 protocols used to transfer data. Local, http, ssh and Git.One more thing: Comparison of Gitlab and GitHubIf you got any questions, feel free to contact me via any communication toolsReference: Git book Atlassian Git tutorial Git full reference Stackoverflow git reset question" }, { "title": "🆕Hello World", "url": "/posts/actual-hello-world/", "categories": "daily-plan", "tags": "", "date": "2019-10-31 01:11:00 +0800", "snippet": "写在十月的最后一天希望自己可以坚持这个习惯毕竟是进步（加薪）的不充分不必要条件（笑）然而还是要认真一点的毕竟自己是微博194粉的大V下一篇blog，tech博主正式起航！2019.10.31" } ]
